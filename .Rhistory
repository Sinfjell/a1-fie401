new_var_names_model5 <- c("Intercept", "Payment_in_Stock", "Bidder_Size", "Bidder_Risk")
new_var_names_model6 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public")
new_var_names_model7 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public", "Public_x_Bidder_Size", "Public_x_Bidder_Risk")
# Generate the stargazer table with custom variable names for model 4
stargazer(model4, title = "Regression Model 4", type = "text", covariate.labels = new_var_names_model4)
# Define custom variable names for each model
new_var_names_model4 <- c("Intercept", "Payment_in_Stock", "Bidder_Size", "Bidder_Risk")
new_var_names_model5 <- c("Intercept", "Payment_in_Stock", "Bidder_Size", "Bidder_Risk")
new_var_names_model6 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public")
new_var_names_model7 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public", "Public_x_Bidder_Size", "Public_x_Bidder_Risk")
# Generate the stargazer table with custom variable names for model 4
stargazer(model4, title = "Regression Model 4", type = "text", covariate.labels = new_var_names_model4)
# Define custom variable names for each model
new_var_names_model4 <- c("Intercept", "Payment_in_Stock", "Bidder_Size", "Bidder_Risk")
new_var_names_model5 <- c("Intercept", "Payment_in_Stock", "Bidder_Size", "Bidder_Risk")
new_var_names_model6 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public")
new_var_names_model7 <- c("Intercept", "Payment_in_Stock", "Is_Target_Public", "Bidder_Size", "Bidder_Risk", "Stock_Payment_x_Public", "Public_x_Bidder_Size", "Public_x_Bidder_Risk")
# Generate the stargazer table with custom variable names for model 4
stargazer(model4, title = "Regression Model 4", type = "text", covariate.labels = new_var_names_model4)
# Generate the stargazer table with custom variable names for model 7
stargazer(model7, title = "Regression Model 7", type = "text", covariate.labels = c("Weight of Car", "Horsepower"))
stargazer(model4, title = "Regression Model 4", type = "text")
# Generate the stargazer table with custom variable names for model 4
stargazer(model4, title = "Regression Model 4", type = "text",
covariate.labels = c("Deal all stock", "Horsepower"))
stargazer(model4, title = "Regression Model 4", type = "text")
# Generate the stargazer table with custom variable names for model 4
stargazer(model4, title = "Regression Model 4", type = "text",
covariate.labels = c("Deal all stock", "Bidder size", ))
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Weight of Car", "Horsepower"))
# printing out the models
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c())
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public company", "Stock payment x Public"))
stargazer(model4, model5, model6, model7, title = "Regression Models with Controls", type = "text", report = "vc*t")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Bidder Car"
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Bidder Car",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public"))
stargazer(model4, model5, model6, model7, title = "Regression Models with Controls", type = "text", report = "vc*t")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public"))
stargazer(model4, model5, model6, model7, title = "Regression Models with Controls", type = "text", report = "vc*t")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public", "Publix x Bidder market value", "Public x Bidder volatility"))
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public", "Publix x Bidder market value", "Public x Bidder volatility"))
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public company", "Stock payment x Public"))
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public company", "Stock payment x Public")
dep.var.labels = "CAR")
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public company", "Stock payment x Public"),
dep.var.labels = "CAR")
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public company", "Stock payment x Public"),
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment stock payment stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public", "Publix x Bidder market value", "Public x Bidder volatility"))
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public", "Publix x Bidder market value", "Public x Bidder volatility"))
stargazer(model4, model5, model6, model7, title = "Regression Models with Controls", type = "text", report = "vc*t")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment", "Public company", "Bidder market value", "Bidder volatility",
"Stock payment x Public", "Publix x Bidder market value", "Public x Bidder volatility"))
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public target", "Stock payment x Public target"),
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment", "Public target", "Bidder market value", "Bidder volatility",
"Stock payment x Public target", "Public target x Bidder market value", "Public target x Bidder volatility"))
stargazer(model1_hom, model2_hom, model3_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t", keep.stat=c(),
covariate.labels = c("Stock payment", "Public target", "Stock payment x Public target"),
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)")
stargazer(model4_hom, model5_hom, model6_hom, model7_hom, title = "Regression Models with Controls",
type = "text", report = "vc*t",
dep.var.labels = "Acquirer’s cumulative abnormal return (CAR)",
covariate.labels = c("Stock payment", "Public target", "Bidder market value", "Bidder volatility",
"Stock payment x Public target", "Public target x Bidder market value", "Public target x Bidder volatility"))
# Breusch-pagan test for homoscedasity
bptest(model1)
bptest(model2)
bptest(model3)
bptest(model4)
bptest(model5)
bptest(model6)
bptest(model7)
# Set up the plotting area for only one plot
par(mfrow = c(1, 1))  # 1 row and 1 column
#DETTE SKAL ETTER AT DESC_TABLE1 ER LAGET
ft_test <- desc_table1 %>% flextable() %>%
align(align ='center', part = 'all') %>%
align(j = 1, align ='left', part = 'all') %>%
colformat_num(j = c(1),big.mark="") %>%
colformat_double(j = c(3,4,5), digits = 2)
library(ggplot2)
library(flextable)
install.packages("flextable")
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Aggregate data by year
desc_table1 <- df %>%
group_by(yyyy) %>%
summarise(
num_deals = n(),
avg_deal_size = mean(deal.value, na.rm = TRUE),
share_private = mean(private, na.rm = TRUE),
share_allstock = mean(deal.allstock, na.rm = TRUE)
)
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# Load libraries
library(robustHD)
library(dplyr)
library(lmtest)
library(vtable)
library(stargazer)
library(lmtest)
library(sandwich)
library(ggplot2)
library(flextable)
# Load the RData file
load("CAR_M&A.RData")
# DATA TREATMENT ------------------------------------------------------------------
# List the names of the objects in the environment
loaded_names <- ls()
# Assuming the first object is the data frame you want
df <- get(loaded_names[1])
# Now you can run summary statistics
summary(df)
# Create an empty list to store the boxplots
boxplot_list <- list()
# Set up the plotting area for multiple plots
par(mfrow = c(3, 3))  # 4 rows and 2 columns
# List of variables to plot
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to create a boxplot
for (var in variables) {
boxplot(df[[var]], main = paste("Boxplot of", var), ylab = var)
boxplot_list[[var]] <- recordPlot()  # Store the boxplot
}
# List of variables to Winsorize
variables <- c("bidder.car", "deal.value", "bidder.size", "bidder.mtb", "bidder.runup", "bidder.fcf", "bidder.lev", "bidder.sigma", "deal.relsize")
# Loop through each variable to Winsorize
for (var in variables) {
df[[var]] <- winsorize(df[[var]], probs = c(0.025, 0.975))
}
# Descriptive table 1 ----------------------------------------------------------------
# Aggregate data by year
desc_table1 <- df %>%
group_by(yyyy) %>%
summarise(
num_deals = n(),
avg_deal_size = mean(deal.value, na.rm = TRUE),
share_private = mean(private, na.rm = TRUE),
share_allstock = mean(deal.allstock, na.rm = TRUE)
)
# Set up the plotting area for only one plot
par(mfrow = c(1, 1))  # 1 row and 1 column
#DETTE SKAL ETTER AT DESC_TABLE1 ER LAGET
ft_test <- desc_table1 %>% flextable() %>%
align(align ='center', part = 'all') %>%
align(j = 1, align ='left', part = 'all') %>%
colformat_num(j = c(1),big.mark="") %>%
colformat_double(j = c(3,4,5), digits = 2)
ft_test
# Calculate the maximum value of the primary y-axis
max_primary_y <- max(c(max(desc_table1$num_deals), max(desc_table1$avg_deal_size)))
# Create the plot
ggplot(desc_table1, aes(x = desc_table1$yyyy)) +
geom_line(aes(y = desc_table1$num_deals, color = "num_deals"), size = 1) +
geom_line(aes(y = desc_table1$avg_deal_size, color = "avg_deal_size"), size = 1) +
geom_line(aes(y = desc_table1$share_private * max_primary_y, color = "share_private"), size = 1) +
geom_line(aes(y = desc_table1$share_allstock * max_primary_y, color = "share_allstock"), size = 1) +
scale_y_continuous(
name = "num_deals and avg_deal_size",
breaks = seq(0, max_primary_y, by = 50),
sec.axis = sec_axis(~ . / max_primary_y,
name = "share_allstock and share_private",
breaks = seq(0, 1, by = 0.1),
labels = scales::percent_format(scale = 100))
) +
labs(
x = "Year",
color = "Lines:"
) +
scale_color_manual(values = c("num_deals" = "blue", "avg_deal_size" = "cadetblue2",
"share_private" = "red", "share_allstock" = "lightpink1")) +
theme_minimal() +
theme(legend.position = "bottom")
# Descriptive table 2 ----------------------------------------------------------------
# Variables to include in the descriptive table
vars_to_include <- c("bidder.car", "deal.allstock", "public", "bidder.size", "bidder.sigma")
# Create the summary table using sumtable()
desc_table2 <- sumtable(df[, vars_to_include])
# Display the table
print(desc_table2)
# Bullet 4 ----------------------------------------------------------------
# Regression models
model1 <- lm(bidder.car ~ deal.allstock, data = subset(df, public == 1))
model2 <- lm(bidder.car ~ deal.allstock, data = subset(df, private == 1))
model3 <- lm(bidder.car ~ deal.allstock + public + deal.allstock*public, data = df)
model2_1 <- lm(bidder.car ~ deal.allstock + hostile, data = subset(df, private == 1))
# Regression models with controls
model4 <- lm(bidder.car ~ deal.allstock + bidder.size + bidder.sigma, data = subset(df, public == 1))
model5 <- lm(bidder.car ~ deal.allstock + bidder.size + bidder.sigma, data = subset(df, private == 1))
model6 <- lm(bidder.car ~ deal.allstock + public + deal.allstock*public + bidder.size + bidder.sigma, data = df)
model7 <- lm(bidder.car ~ deal.allstock + public + deal.allstock*public + bidder.size + bidder.sigma + bidder.size:public + bidder.sigma:public, data = df)
# Breusch-pagan test for homoscedasity
bptest(model1)
bptest(model2)
bptest(model3)
bptest(model4)
bptest(model5)
bptest(model6)
bptest(model7)
# low p-values, we need to adjust for heteroscedasity
# Adjusting for heteroscedasity
model1_hom <- coeftest(model1, vcov = vcocHC)
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
table(subset(df, public == 1)$hostile)
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
table(subset(df, public == 1)$hostile)
# Check summary statistics
summary(subset(df, private == 1)$hostile)
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
table(subset(df, public == 1)$hostile)
# For Private Targets
cat("### Table: Hostile Transactions by Target Type\n")
cat("#### Private Targets\n")
cat("| Hostile Status | Frequency |\n")
cat("|----------------|-----------|\n")
private_table <- table(subset(df, private == 1)$hostile)
for(i in 1:length(private_table)) {
cat("| Not Hostile    |", private_table[i], "     |\n")
}
# For Public Targets
cat("\n#### Public Targets\n")
cat("| Hostile Status | Frequency |\n")
cat("|----------------|-----------|\n")
public_table <- table(subset(df, public == 1)$hostile)
for(i in 1:length(public_table)) {
if (names(public_table)[i] == "0") {
cat("| Not Hostile    |", public_table[i], "     |\n")
} else {
cat("| Hostile        |", public_table[i], "     |\n")
}
}
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
# Create a table for hostile status when the target is private
private_hostile_table <- table(subset(df, private == 1)$hostile)
# Print the table with a header
cat("### Table: Hostile Status for Private Targets\n")
cat("| Hostile Status | Frequency |\n")
cat("|----------------|-----------|\n")
# Loop through the table to print each row
for(i in 1:length(private_hostile_table)) {
if (names(private_hostile_table)[i] == "0") {
cat("| Not Hostile    |", private_hostile_table[i], "     |\n")
} else {
cat("| Hostile        |", private_hostile_table[i], "     |\n")
}
}
# Check the distribution of 'hostile' within the subset where 'private == 1'
table(subset(df, private == 1)$hostile)
table(subset(df, public == 1)$hostile)
# Check the distribution of 'hostile' within the subset where 'private == 1'
# Adding 'hostile' as a control variable in the second regression model
model2_with_hostile <- lm(bidder.car ~ deal.allstock + hostile, data = subset(df, private == 1))
summary(model2_with_hostile)
# Display the table
print(desc_table2)
# Descriptive table 2 ----------------------------------------------------------------
# Variables to include in the descriptive table
vars_to_include <- c("bidder.car", "deal.allstock", "public", "bidder.size", "bidder.sigma")
# Create the summary table using sumtable()
desc_table2 <- sumtable(df[, vars_to_include])
# Display the table
print(desc_table2)
# Rename variables in the data frame
colnames(df)[colnames(df) %in% vars_to_include] <- c("Bidder CAR", "Stock Payment", "Target Public", "Bidder Market Value", "Bidder Volatility")
# Variables to include in the descriptive table
vars_to_include_new <- c("Bidder CAR", "Stock Payment", "Target Public", "Bidder Market Value", "Bidder Volatility")
# Create the summary table using sumtable()
desc_table2 <- sumtable(df[, vars_to_include_new])
# Display the table
print(desc_table2)
# Variables to include in the descriptive table
vars_to_include_new <- c("CAR", "Stock Payment", "Target Public", "Bidder Market Value", "Bidder Volatility")
# Create the summary table using sumtable()
desc_table2 <- sumtable(df[, vars_to_include_new])
# Display the table
print(desc_table2)
